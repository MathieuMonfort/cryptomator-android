apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
	def globalConfiguration = rootProject.extensions.getByName("ext")

	compileSdkVersion globalConfiguration["androidCompileSdkVersion"]
	buildToolsVersion globalConfiguration["androidBuildToolsVersion"]

	defaultConfig {
		minSdkVersion globalConfiguration["androidMinSdkVersion"]
		targetSdkVersion globalConfiguration["androidTargetSdkVersion"]

		buildConfigField 'int', 'VERSION_CODE', "${globalConfiguration["androidVersionCode"]}"
		buildConfigField "String", "VERSION_NAME", "\"${globalConfiguration["androidVersionName"]}\""

	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8

		coreLibraryDesugaringEnabled true
	}

	buildTypes {
		release {

		}

		debug {

		}
	}

	flavorDimensions "version"

	productFlavors {
		playstore {
			dimension "version"
		}

		apkstore {
			dimension "version"
		}

		fdroid {
			dimension "version"
		}

		lite {
			dimension "version"
		}
	}

	sourceSets {
		playstore {
			java.srcDirs = ['src/main/java/', 'src/apiKey/java/', 'src/apkStorePlaystore/java/']
		}

		apkstore {
			java.srcDirs = ['src/main/java/', 'src/apiKey/java/', 'src/apkStorePlaystore/java/']
		}

		fdroid {
			java.srcDirs = ['src/main/java/', 'src/apiKey/java/', 'src/fdroid/java/']
		}

		lite {
			java.srcDirs = ['src/main/java/', 'src/lite/java/']
		}
	}
	packagingOptions {
		resources {
			excludes += ['META-INF/DEPENDENCIES', 'META-INF/NOTICE.md', 'META-INF/INDEX.LIST']
		}
	}

	lint {
		abortOnError false
		ignoreWarnings true
		quiet true
	}
	namespace 'org.cryptomator.data'
}

configurations.all {
	// Check for updates every build (use for cryptolib snapshot)
	//resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
	def dependencies = rootProject.ext.dependencies

	coreLibraryDesugaring dependencies.coreDesugaring

}

configurations {
	all*.exclude group: 'com.google.android', module: 'android'
}

def liteFlavor() {
	gradle.startParameter.taskNames.stream().filter(t -> t.toLowerCase().contains("lite")).findAny().isPresent()
}

def getApiKey(key) {
	return !liteFlavor() ? System.getenv().getOrDefault(key, "") : ""
}

tasks.withType(Test) {
	testLogging {
		events "failed"

		showExceptions true
		exceptionFormat "full"
		showCauses true
		showStackTraces true

		showStandardStreams = false
	}
}
